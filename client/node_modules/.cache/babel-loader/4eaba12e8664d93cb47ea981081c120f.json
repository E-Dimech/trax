{"ast":null,"code":"// import React from \"react\";\n// import axios from \"axios\";\n// import \"./Search.scss\";\n// import magnify from \"../../assets/icons/magnifier.svg\";\n// class Search extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       query: \"\",\n//       results: {},\n//       message: \"\",\n//     };\n//     this.cancel = \"\";\n//   }\n//   fetchSearchResults = (updatedPageNo = \"\", query) => {\n//     const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : \"\";\n//     const searchUrl = `https://pixabay.com/api/?key=12413278-79b713c7e196c7a3defb5330e&q=${query}${pageNumber}`;\n//     if (this.cancel) {\n//       this.cancel.cancel(); // Cancel the previous request before making a new request\n//     }\n//     this.cancel = axios.CancelToken.source(); // Create a new CancelToken\n//     axios\n//       .get(searchUrl, {\n//         cancelToken: this.cancel.token,\n//       })\n//       .then((res) => {\n//         // console.log(res.data)\n//         const resultsNotFoundMsg = !res.data.hits.length\n//           ? \"Where are all the coasters?\"\n//           : \"\";\n//         this.setState({\n//           // CHANGE HITS TO PARK ASSOCIATED NAME IN DATA\n//           results: res.data.hits,\n//           message: resultsNotFoundMsg,\n//         });\n//       })\n//       .catch((error) => {\n//         if (axios.isCancel(error) || error) {\n//           this.setState({\n//             message: \"Where are all the coasters?\",\n//           });\n//         }\n//       });\n//   };\n//   handleOnInputChange = (event) => {\n//     const query = event.target.value;\n//     if (!query) {\n//       this.setState({ query, results: {} });\n//     } else {\n//       this.setState({ query, loading: true, message: \"\" }, () => {\n//         this.fetchSearchResults(1, query);\n//       });\n//     }\n//   };\n//   renderSearchResults = () => {\n//     const { results } = this.state;\n//     if (Object.keys(results).length && results.length) {\n//       return (\n//         <div className=\"results-container\">\n//           {results.map((results) => {\n//             return (\n//               //   Make this the park name, onclick user will see coasters\n//               <a\n//                 key={results.id}\n//                 href={results.previewURL}\n//                 className=\"result-item\"\n//               >\n//                 {/* CONFIGURE THIS SECTION TO MATCH COASTER DATA */}\n//                 {/* <h6 className=\"image-username\">{results.user}</h6> */}\n//                 <div className=\"image-wrapper\">\n//                   <img\n//                     src={results.previewURL}\n//                     alt={results.username}\n//                     className=\"image\"\n//                   />\n//                 </div>\n//               </a>\n//             );\n//           })}\n//         </div>\n//       );\n//     }\n//   };\n//   render() {\n//     const { query, message } = this.state;\n//     return (\n//       <div className=\"container\">\n//         <h2 className=\"heading\">TRAX</h2>\n//         <label className=\"search-label\" htmlFor=\"search-input\">\n//           <input\n//             className=\"container-input\"\n//             name=\"query\"\n//             type=\"text\"\n//             value={query}\n//             id=\"search-input\"\n//             placeholder=\"Enter Park Name...\"\n//             onChange={this.handleOnInputChange}\n//           />\n//           {/* Find search img */}\n//           <img className=\"search-icon\" src={magnify} alt=\"search\" />\n//         </label>\n//         {/*Error Message*/}\n//         {message && <p className=\"message\">{message}</p>}\n//         {/* Result */}\n//         {this.renderSearchResults()}\n//       </div>\n//     );\n//   }\n// }\n// export default Search;","map":{"version":3,"sources":["/Users/ericdimech/Dev/trax/client/src/components/Search/Search.jsx"],"names":[],"mappingssourcesContent":["// import React from \"react\";\n// import axios from \"axios\";\n// import \"./Search.scss\";\n// import magnify from \"../../assets/icons/magnifier.svg\";\n\n// class Search extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       query: \"\",\n//       results: {},\n//       message: \"\",\n//     };\n//     this.cancel = \"\";\n//   }\n\n//   fetchSearchResults = (updatedPageNo = \"\", query) => {\n//     const pageNumber = updatedPageNo ? `&page=${updatedPageNo}` : \"\";\n//     const searchUrl = `https://pixabay.com/api/?key=12413278-79b713c7e196c7a3defb5330e&q=${query}${pageNumber}`;\n\n//     if (this.cancel) {\n//       this.cancel.cancel(); // Cancel the previous request before making a new request\n//     }\n//     this.cancel = axios.CancelToken.source(); // Create a new CancelToken\n\n//     axios\n//       .get(searchUrl, {\n//         cancelToken: this.cancel.token,\n//       })\n//       .then((res) => {\n//         // console.log(res.data)\n//         const resultsNotFoundMsg = !res.data.hits.length\n//           ? \"Where are all the coasters?\"\n//           : \"\";\n//         this.setState({\n//           // CHANGE HITS TO PARK ASSOCIATED NAME IN DATA\n//           results: res.data.hits,\n//           message: resultsNotFoundMsg,\n//         });\n//       })\n//       .catch((error) => {\n//         if (axios.isCancel(error) || error) {\n//           this.setState({\n//             message: \"Where are all the coasters?\",\n//           });\n//         }\n//       });\n//   };\n\n//   handleOnInputChange = (event) => {\n//     const query = event.target.value;\n//     if (!query) {\n//       this.setState({ query, results: {} });\n//     } else {\n//       this.setState({ query, loading: true, message: \"\" }, () => {\n//         this.fetchSearchResults(1, query);\n//       });\n//     }\n//   };\n\n//   renderSearchResults = () => {\n//     const { results } = this.state;\n\n//     if (Object.keys(results).length && results.length) {\n//       return (\n//         <div className=\"results-container\">\n//           {results.map((results) => {\n//             return (\n//               //   Make this the park name, onclick user will see coasters\n//               <a\n//                 key={results.id}\n//                 href={results.previewURL}\n//                 className=\"result-item\"\n//               >\n//                 {/* CONFIGURE THIS SECTION TO MATCH COASTER DATA */}\n//                 {/* <h6 className=\"image-username\">{results.user}</h6> */}\n//                 <div className=\"image-wrapper\">\n//                   <img\n//                     src={results.previewURL}\n//                     alt={results.username}\n//                     className=\"image\"\n//                   />\n//                 </div>\n//               </a>\n//             );\n//           })}\n//         </div>\n//       );\n//     }\n//   };\n\n//   render() {\n//     const { query, message } = this.state;\n//     return (\n//       <div className=\"container\">\n//         <h2 className=\"heading\">TRAX</h2>\n\n//         <label className=\"search-label\" htmlFor=\"search-input\">\n//           <input\n//             className=\"container-input\"\n//             name=\"query\"\n//             type=\"text\"\n//             value={query}\n//             id=\"search-input\"\n//             placeholder=\"Enter Park Name...\"\n//             onChange={this.handleOnInputChange}\n//           />\n//           {/* Find search img */}\n//           <img className=\"search-icon\" src={magnify} alt=\"search\" />\n//         </label>\n//         {/*Error Message*/}\n//         {message && <p className=\"message\">{message}</p>}\n//         {/* Result */}\n//         {this.renderSearchResults()}\n//       </div>\n//     );\n//   }\n// }\n// export default Search;\n"]},"metadata":{},"sourceType":"module"}